# -*- coding: utf-8 -*-
#/usr/bin/python2

'''
Combined nancy & nick voice for ICPhS in first instance.
Stage 2: fine tune on nick only
'''


import os


## Take name of this file to be the config name:
config_name = os.path.split(__file__)[-1].split('.')[0]  ## remove path and extension

## Define place to put outputs relative to this config file's location;
## supply an absoluate path to work elsewhere:
topworkdir = os.path.realpath(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'work')))

voicedir = os.path.join(topworkdir, config_name)
logdir = os.path.join(voicedir, 'train')
sampledir = os.path.join(voicedir, 'synth')

## Change featuredir to absolute path to use existing features
featuredir = os.path.join(topworkdir, 'nancy2nick_01', 'data')  
coarse_audio_dir = os.path.join(featuredir, 'mels')
full_mel_dir = os.path.join(featuredir, 'full_mels')
full_audio_dir = os.path.join(featuredir, 'mags')
attention_guide_dir = os.path.join(featuredir, 'attention_guides')  ## Set this to the empty string ('') to global attention guide



# data locations:
datadir = '/group/project/cstr2/owatts/data/nick16k/' 


transcript = os.path.join(datadir, 'transcript.csv')
test_transcript = os.path.join(datadir, 'transcript_hvd.csv')
#test_transcript = os.path.join(datadir, 'transcript_mrt.csv')

waveforms = os.path.join(datadir, 'wav_trim')



input_type = 'phones' ## letters or phones

vocab = ['<PADDING>', '<!>', "<'s>", '<,>', '<.>', '<:>', '<;>', '<>', \
            '<?>', '<_END_>', '<_START_>', '@', '@@', '@U', 'A', 'D', 'E', \
            'E@', 'I', 'I@', 'N', 'O', 'OI', 'Q', 'S', 'T', 'U', 'U@', 'V', \
            'Z', 'a', 'aI', 'aU', 'b', 'd', 'dZ', 'eI', 'f', 'g', 'h', 'i', \
            'j', 'k', 'l', 'l!', 'lw', 'm', 'm!', 'n', 'n!', 'o^', 'o~', 'p', \
            'r', 's', 't', 'tS', 'u', 'v', 'w', 'z']

#vocab = "PE abcdefghijklmnopqrstuvwxyz'.?" # P: Padding, E: EOS.
max_N = 140 # Maximum number of characters. # !!!
max_T = 200 # Maximum number of mel frames. # !!!
multispeaker = ['text_encoder_input', 'audio_decoder_input'] ## []: speaker dependent. text_encoder_input, text_encoder_towards_end, audio_decoder_input, ssrn_input, audio_encoder_input
speaker_list = ['<PADDING>']  +  ['nancy', 'nick']
nspeakers = len(speaker_list) + 10 ## add 10 extra slots for posterity's sake 
speaker_embedding_size = 128
n_utts = 0 ## 0 means use all data, other positive integer means select this many sentences from beginning of training set 
random_reduction_on_the_fly = True ## Randomly choose shift when performing reduction to get coarse features.
            


# signal processing
trim_before_spectrogram_extraction = 0    
vocoder = 'griffin_lim'  
sr = 16000  # Sampling rate.
n_fft = 2048  # fft points (samples)
frame_shift = 0.0125  # seconds
frame_length = 0.05  # seconds
hop_length = int(sr * frame_shift)
win_length = int(sr * frame_length)    
prepro = True  # don't extract spectrograms on the fly
full_dim = n_fft//2+1
n_mels = 80  # Number of Mel banks to generate
power = 1.5  # Exponent for amplifying the predicted magnitude
n_iter = 50  # Number of inversion iterations
preemphasis = .97
max_db = 100
ref_db = 20


# Model
r = 4 # Reduction factor. Do not change this.
dropout_rate = 0.05
e = 128 # == embedding
d = 256 # == hidden units of Text2Mel
c = 512 # == hidden units of SSRN
attention_win_size = 3
g = 0.2 ## determines width of band in attention guide
norm = 'layer' ## type of normalisation layers to use: from ['layer', 'batch', None]

## loss weights : T2M
lw_mel = 0.3333
lw_bd1 = 0.3333
lw_att = 0.3333
##              : SSRN
lw_mag = 0.5
lw_bd2 = 0.5


## validation:
validpatt = 'herald_9' ## herald_9 matches 98 sentences from nick
#### NYT00 matches 24 of nancy's sentences.
validation_sentences_to_evaluate = 24
validation_sentences_to_synth_params = 16


# training scheme
restart_from_savepath = []
lr = 0.001 # Initial learning rate.
batchsize = {'t2m': 32, 'ssrn': 32}
validate_every_n_epochs = 1   ## how often to compute validation score and save speech parameters
save_every_n_epochs = 10 ## as well as 5 latest models, how often to archive a model
max_epochs = 100

## copy existing model parameters -- list of (scope, checkpoint) pairs:--
WORK=topworkdir
initialise_weights_from_existing = [('Text2Mel', WORK+'/nancyplusnick_01/train-t2m/model_epoch_1000')]

update_weights = []  ## If empty, update all trainable variables. Otherwise, update only 
                     ## those variables whose scopes match one of the patterns in the list
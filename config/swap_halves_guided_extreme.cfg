# -*- coding: utf-8 -*-
#/usr/bin/python2

'''
Baseline model for attention-paper

Set the weight of guided attention loss, lw_att, to 0
'''

import os

## Take name of this file to be the config name:
config_name = os.path.split(__file__)[-1].replace('.cfg', '')  ## remove path and extension

## Define place to put outputs relative to this config file's location;
## supply an absoluate path to work elsewhere:
topworkdir = os.path.realpath(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'work')))

voicedir = os.path.join(topworkdir, config_name)
logdir = os.path.join(voicedir, 'train')
sampledir = os.path.join(voicedir, 'synth')

## Change featuredir to absolute path to use existing features
featuredir = os.path.join(topworkdir, 'lj_test', 'data')  ## use older data
coarse_audio_dir = os.path.join(featuredir, 'mels')
full_mel_dir = os.path.join(featuredir, 'full_mels')
full_audio_dir = os.path.join(featuredir, 'mags')
attention_guide_dir = os.path.join(featuredir, 'attention_guides') ## Set this to the empty string ('') to global attention guide

# data locations:
datadir = '/group/project/cstr2/owatts/data/LJSpeech-1.1/' 
transcript_dir = '/group/project/cstr1/jasonfong/files_dctts/LJ_unilex/transcripts'

waveforms = os.path.join(datadir, 'wav_trim')
transcript = os.path.join(transcript_dir, 'swap_halves_transcript_unilex.csv')
test_transcript = os.path.join(transcript_dir, 'test_transcript_unilex.csv') #full test set (LJ chap 1 and 50)


input_type = 'phones' ## letters or phones
## Combilex RPX plus extra symbols:- 
#vocab = ['<PADDING>', '<!>', "<'>", "<'s>", '<)>', '<]>', '<">', '<,>', '<.>', '<:>', '<;>', '<>', '<?>', \
         # '<_END_>', '<_START_>', \
         # '@', '@@', '@U', 'A', 'D', 'E', 'E@', 'I', 'I@', 'N', 'O', 'OI', 'Q', 'S', 'T', 'U',\
         # 'U@', 'V', 'Z', 'a', 'aI', 'aU', 'b', 'd', 'dZ', 'eI', 'f', 'g', 'h', 'i', 'j', 'k',\
         # 'l', 'l!', 'lw', 'm', 'm!', 'n', 'n!', 'o^', 'o~', 'p', 'r', 's', 't', 'tS', 'u', 'v', 'w', 'z']

### CMU lex version:-
# vocab = ['<PADDING>', '<!>', '<">', "<'>", "<'s>", '<)>', '<,>', '<.>', '<:>', \
#             '<;>', '<>', '<?>', '<]>', '<_END_>', '<_START_>', 'aa', 'ae', 'ah', \
#             'ao', 'aw', 'ax', 'ay', 'b', 'ch', 'd', 'dh', 'eh', 'er', 'ey', \
#             'f', 'g', 'hh', 'ih', 'iy', 'jh', 'k', 'l', 'm', 'n', 'ng', 'ow', \
#             'oy', 'p', 'pau', 'r', 's', 'sh', 't', 'th', 'uh', 'uw', 'v', \
#             'w', 'y', 'z', 'zh']

## Unilex version:-
vocab = ['<PADDING>', '<!>', '<">', "<'>", "<'s>", '<)>', '<,>', '<.>', '<:>', '<;>', '<>', '<?>', \
         '<]>', '<_END_>', '<_START_>', '?', '@', '@@r', 'a', 'aa', 'ai', 'ax', 'b', \
         'ch', 'd', 'dh', 'e', 'ei', 'eir', 'f', 'g', 'h', 'i', 'i@', 'ii', 'iy', 'jh', \
         'k', 'l', 'l!', 'lw', 'm', 'm!', 'n', 'n!', 'ng', 'o', 'oi', 'oo', 'ou', 'ow', \
         'p', 'r', 's', 'sh', 't', 'th', 'u', 'uh', 'ur', 'uu', 'uw', 'v', 'w', 'y', 'z', 'zh']

# vocab = ['<!>', '<">', "<'>", "<'s>", '<)>', '<,>', '<.>', '<:>', '<;>', '<>', '<?>', \
# '<]>', '<_END_>', '<_START_>', '?', '@', '@@r', 'a', 'aa', 'ai', 'ax', 'b', \
# 'ch', 'd', 'dh', 'e', 'ei', 'eir', 'f', 'g', 'h', 'i', 'i@', 'ii', 'iy', 'jh', \
# 'k', 'l', 'l!', 'lw', 'm', 'm!', 'n', 'n!', 'ng', 'o', 'oi', 'oo', 'ou', 'ow', \
# 'p', 'r', 's', 'sh', 't', 'th', 'u', 'uh', 'ur', 'uu', 'uw', 'v', 'w', 'y', 'z', 'zh']

#vocab = "PE abcdefghijklmnopqrstuvwxyz'.?" # P: Padding, E: EOS.
max_N = 164 # Maximum number of characters. # !!!
max_T = 210 # Maximum number of mel frames. # !!!
multispeaker = [] ## 0: speaker dependent 
n_utts = 0 ## 0 means use all data, other positive integer means select this many sentences from beginning of training set 
random_reduction_on_the_fly = True ## Randomly choose shift when performing reduction to get coarse features.
            


# signal processing
trim_before_spectrogram_extraction = 0    
vocoder = 'griffin_lim'  
sr = 22050  # Sampling rate.
n_fft = 2048  # fft points (samples)
frame_shift = 0.0125  # seconds
frame_length = 0.05  # seconds
hop_length = int(sr * frame_shift)
win_length = int(sr * frame_length)    
prepro = True  # don't extract spectrograms on the fly
full_dim = n_fft//2+1
n_mels = 80  # Number of Mel banks to generate
power = 1.5  # Exponent for amplifying the predicted magnitude
n_iter = 50  # Number of inversion iterations
preemphasis = .97
max_db = 100
ref_db = 20


# Model
r = 4 # Reduction factor. Do not change this.
dropout_rate = 0.05
e = 128 # == embedding
d = 256 # == hidden units of Text2Mel
c = 512 # == hidden units of SSRN
attention_win_size = 3
g = 0.2 ## determines width of band in attention guide
norm = 'layer' ## type of normalisation layers to use: from ['layer', 'batch', None]

## loss weights : T2M
lw_mel = 0.05
lw_bd1 = 0.05
lw_att = 0.9
##              : SSRN
lw_mag = 0.5
lw_bd2 = 0.5


## validation:
validpatt = 'LJ050-' ## sentence names containing this substring will be held out of training. In this case we will hold out 50th chapter of LJ. TODO: mention SD vs. SI
validation_sentences_to_evaluate = 32 
validation_sentences_to_synth_params = 3

# training settings
restart_from_savepath = False
lr = 0.001 # Initial learning rate.
batchsize = {'t2m': 16, 'ssrn': 16}
num_threads = 6 # how many threads get_batch should use to build training batches of data (default: 8)
validate_every_n_epochs = 0   ## how often to compute validation score and save speech parameters
save_every_n_epochs = 0 ## as well as 5 latest models, how often to archive a model
save_first_n_epochs = 0 ## save the model every epoch for the first n epochs
max_epochs = 300
plot_attention_every_n_epochs = 1 ## set to 0 if you do not wish to plot attention matrices
num_sentences_to_plot_attention = 5 ## number of sentences to plot attention matrices for (if 0 will plot for all validation sentences)
random_seed = 1 ##set to None if you do not want a random seed

# synthesis settings
monotonic_attention = False #choose whether to use monotonic attention when generating using synthesize.py